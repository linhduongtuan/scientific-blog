// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Using SQLite for easier development setup
  url      = env("DATABASE_URL")
}

model Application {
  id                         String   @id @default(cuid())
  name                       String
  email                      String
  gender                     String
  dob                        DateTime
  nationality                String
  position                   String
  coverLetter                String
  cvPath                     String
  coverLetterFilePath        String?
  recommendationLetterPaths  String   // Storing JSON array as string
  certificatePaths           String   // Storing JSON array as string
  createdAt                  DateTime @default(now())
}

// Lab Members
model Member {
  id        String   @id @default(cuid())
  name      String
  role      String
  image     String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Lab Alumni
model Alumni {
  id             String   @id @default(cuid())
  name           String
  email          String?
  graduationYear Int?
  current        String
  occupation     String?
  company        String?
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Lab News
model News {
  id        String   @id @default(cuid())
  title     String
  summary   String
  date      DateTime @default(now())
  link      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                      String             @id @default(cuid())
  name                    String?
  email                   String             @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    String             @default("USER")
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  accounts                Account[]
  sessions                Session[]
  chatRoomMemberships     ChatRoomMember[]
  subscribed              Boolean            @default(false)
  verificationToken       String?
  Comment                 Comment[]
  ChatMessage             ChatMessage[]
  ChatReaction            ChatReaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id       String   @id @default(cuid())
  content  String
  postId   String
  authorId String
  author   User     @relation(fields: [authorId], references: [id])
  created  DateTime @default(now())
}

model ChatRoom {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  isPrivate   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  members     ChatRoomMember[]
  messages    ChatMessage[]
}

model ChatRoomMember {
  id       String   @id @default(cuid())
  userId   String
  roomId   String
  role     String   @default("MEMBER") // MEMBER, MODERATOR, ADMIN
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room     ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model ChatMessage {
  id            String         @id @default(cuid())
  content       String
  userId        String?        // Made optional to support anonymous users
  roomId        String
  parentId      String?        // For reply threads
  fileUrl       String?        // For file sharing
  fileName      String?        // Original file name
  fileType      String?        // MIME type
  isModerated   Boolean        @default(false)
  moderationReason String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  room          ChatRoom       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  parent        ChatMessage?   @relation("MessageReplies", fields: [parentId], references: [id])
  replies       ChatMessage[]  @relation("MessageReplies")
  reactions     ChatReaction[]
}

model ChatReaction {
  id        String      @id @default(cuid())
  emoji     String
  userId    String?     // Made optional to support anonymous users
  messageId String
  createdAt DateTime    @default(now())
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}
